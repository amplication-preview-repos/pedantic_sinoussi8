/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DomainService } from "../domain.service";
import { DomainCreateInput } from "./DomainCreateInput";
import { Domain } from "./Domain";
import { DomainFindManyArgs } from "./DomainFindManyArgs";
import { DomainWhereUniqueInput } from "./DomainWhereUniqueInput";
import { DomainUpdateInput } from "./DomainUpdateInput";
import { RecordFindManyArgs } from "../../record/base/RecordFindManyArgs";
import { Record } from "../../record/base/Record";
import { RecordWhereUniqueInput } from "../../record/base/RecordWhereUniqueInput";

export class DomainControllerBase {
  constructor(protected readonly service: DomainService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Domain })
  async createDomain(@common.Body() data: DomainCreateInput): Promise<Domain> {
    return await this.service.createDomain({
      data: {
        ...data,

        account: data.account
          ? {
              connect: data.account,
            }
          : undefined,
      },
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Domain] })
  @ApiNestedQuery(DomainFindManyArgs)
  async domains(@common.Req() request: Request): Promise<Domain[]> {
    const args = plainToClass(DomainFindManyArgs, request.query);
    return this.service.domains({
      ...args,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Domain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async domain(
    @common.Param() params: DomainWhereUniqueInput
  ): Promise<Domain | null> {
    const result = await this.service.domain({
      where: params,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Domain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDomain(
    @common.Param() params: DomainWhereUniqueInput,
    @common.Body() data: DomainUpdateInput
  ): Promise<Domain | null> {
    try {
      return await this.service.updateDomain({
        where: params,
        data: {
          ...data,

          account: data.account
            ? {
                connect: data.account,
              }
            : undefined,
        },
        select: {
          account: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Domain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDomain(
    @common.Param() params: DomainWhereUniqueInput
  ): Promise<Domain | null> {
    try {
      return await this.service.deleteDomain({
        where: params,
        select: {
          account: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/records")
  @ApiNestedQuery(RecordFindManyArgs)
  async findRecords(
    @common.Req() request: Request,
    @common.Param() params: DomainWhereUniqueInput
  ): Promise<Record[]> {
    const query = plainToClass(RecordFindManyArgs, request.query);
    const results = await this.service.findRecords(params.id, {
      ...query,
      select: {
        createdAt: true,

        domain: {
          select: {
            id: true,
          },
        },

        id: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/records")
  async connectRecords(
    @common.Param() params: DomainWhereUniqueInput,
    @common.Body() body: RecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      records: {
        connect: body,
      },
    };
    await this.service.updateDomain({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/records")
  async updateRecords(
    @common.Param() params: DomainWhereUniqueInput,
    @common.Body() body: RecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      records: {
        set: body,
      },
    };
    await this.service.updateDomain({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/records")
  async disconnectRecords(
    @common.Param() params: DomainWhereUniqueInput,
    @common.Body() body: RecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      records: {
        disconnect: body,
      },
    };
    await this.service.updateDomain({
      where: params,
      data,
      select: { id: true },
    });
  }
}
