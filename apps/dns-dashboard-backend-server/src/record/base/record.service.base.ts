/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Record as PrismaRecord,
  Domain as PrismaDomain,
} from "@prisma/client";

export class RecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RecordCountArgs, "select">): Promise<number> {
    return this.prisma.record.count(args);
  }

  async records<T extends Prisma.RecordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecordFindManyArgs>
  ): Promise<PrismaRecord[]> {
    return this.prisma.record.findMany<Prisma.RecordFindManyArgs>(args);
  }
  async record<T extends Prisma.RecordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecordFindUniqueArgs>
  ): Promise<PrismaRecord | null> {
    return this.prisma.record.findUnique(args);
  }
  async createRecord<T extends Prisma.RecordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecordCreateArgs>
  ): Promise<PrismaRecord> {
    return this.prisma.record.create<T>(args);
  }
  async updateRecord<T extends Prisma.RecordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecordUpdateArgs>
  ): Promise<PrismaRecord> {
    return this.prisma.record.update<T>(args);
  }
  async deleteRecord<T extends Prisma.RecordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecordDeleteArgs>
  ): Promise<PrismaRecord> {
    return this.prisma.record.delete(args);
  }

  async getDomain(parentId: string): Promise<PrismaDomain | null> {
    return this.prisma.record
      .findUnique({
        where: { id: parentId },
      })
      .domain();
  }
}
